services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bachelor_postgres
    environment:
      POSTGRES_DB: bachelor_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - bachelor_network

  # Go Backend API
  backend:
    build: ./backend
    container_name: bachelor_backend
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=bachelor_db
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - ML_SERVICE_URL=http://ml_service:8000
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://127.0.0.1:3000,http://127.0.0.1:5173,http://frontend:80,http://bachelor_frontend:80
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bachelor_network

  # Python ML Service
  ml_service:
    build: ./ml_service
    container_name: bachelor_ml_service
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=bachelor_db
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - bachelor_network

  # React Frontend with Nginx
  frontend:
    build: 
      context: ./frontend
      args:
        - VITE_API_URL=http://localhost:8081
        - VITE_ML_API_URL=http://localhost:8000
    container_name: bachelor_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
      - ml_service
    restart: unless-stopped
    networks:
      - bachelor_network

volumes:
  postgres_data:

networks:
  bachelor_network:
    driver: bridge 