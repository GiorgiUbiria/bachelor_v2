basePath: /api/v1
definitions:
  handlers.AddCommentRequest:
    properties:
      content:
        example: Great product!
        maxLength: 1000
        minLength: 1
        type: string
      product_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      rating:
        example: 5
        maximum: 5
        minimum: 1
        type: integer
    required:
    - content
    - product_id
    - rating
    type: object
  handlers.AddFavoriteRequest:
    properties:
      product_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - product_id
    type: object
  handlers.AddProductTagRequest:
    properties:
      product_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      tag_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - product_id
    - tag_id
    type: object
  handlers.AddToCartRequest:
    properties:
      product_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      quantity:
        example: 2
        maximum: 100
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  handlers.AddUpvoteRequest:
    properties:
      product_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
    required:
    - product_id
    type: object
  handlers.AuthResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  handlers.CreateDiscountRequest:
    properties:
      category:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      discount_type:
        enum:
        - percentage
        - fixed_amount
        example: percentage
        type: string
      discount_value:
        example: 20
        minimum: 0
        type: number
      end_date:
        example: "2024-12-31T23:59:59Z"
        type: string
      max_discount_amount:
        example: 50
        minimum: 0
        type: number
      min_order_amount:
        example: 100
        minimum: 0
        type: number
      product_id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      start_date:
        example: "2024-01-01T00:00:00Z"
        type: string
      usage_limit:
        example: 100
        minimum: 0
        type: integer
    required:
    - discount_type
    - discount_value
    - end_date
    - start_date
    type: object
  handlers.CreateOrderRequest:
    properties:
      cart_item_ids:
        description: 'Optional: specific cart items to order (as string UUIDs)'
        example:
        - 123e4567-e89b-12d3-a456-426614174000
        - 456e7890-e89b-12d3-a456-426614174001
        items:
          type: string
        type: array
      payment_method:
        enum:
        - credit_card
        - debit_card
        - paypal
        - bank_transfer
        example: credit_card
        type: string
      shipping_address:
        example: 123 Main St, City, State 12345
        maxLength: 500
        minLength: 10
        type: string
    required:
    - payment_method
    - shipping_address
    type: object
  handlers.CreateProductRequest:
    properties:
      category:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      description:
        example: Latest iPhone with A17 Pro chip
        maxLength: 1000
        minLength: 1
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      name:
        example: iPhone 15 Pro
        maxLength: 255
        minLength: 1
        type: string
      price:
        example: 999.99
        minimum: 0.01
        type: number
      stock:
        example: 50
        minimum: 0
        type: integer
    required:
    - category
    - description
    - name
    - price
    - stock
    type: object
  handlers.CreateTagRequest:
    properties:
      color:
        example: '#FF5733'
        type: string
      description:
        example: Electronic devices and gadgets
        maxLength: 255
        type: string
      name:
        example: Electronics
        maxLength: 50
        minLength: 1
        type: string
    required:
    - name
    type: object
  handlers.LoginRequest:
    properties:
      email:
        example: user@example.com
        maxLength: 255
        type: string
      password:
        example: password123
        maxLength: 128
        minLength: 1
        type: string
    required:
    - email
    - password
    type: object
  handlers.RegisterRequest:
    properties:
      email:
        example: user@example.com
        maxLength: 255
        type: string
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      password:
        example: password123
        maxLength: 128
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  handlers.ResolveAlertRequest:
    properties:
      notes:
        example: False positive - legitimate admin access
        type: string
    type: object
  handlers.SecurityDashboardResponse:
    properties:
      ml_dashboard:
        additionalProperties: true
        type: object
      recent_alerts:
        items:
          $ref: '#/definitions/models.AnomalyAlert'
        type: array
      security_metrics:
        items:
          $ref: '#/definitions/models.SecurityMetrics'
        type: array
      summary:
        additionalProperties: true
        type: object
    type: object
  handlers.StandardErrorResponse:
    properties:
      error:
        example: Invalid email or password
        type: string
      success:
        example: false
        type: boolean
    type: object
  handlers.UpdateCartItemRequest:
    properties:
      quantity:
        example: 3
        maximum: 100
        minimum: 0
        type: integer
    required:
    - quantity
    type: object
  handlers.UpdateCommentRequest:
    properties:
      content:
        example: Updated comment
        maxLength: 1000
        minLength: 1
        type: string
      rating:
        example: 4
        maximum: 5
        minimum: 1
        type: integer
    type: object
  handlers.UpdateOrderStatusRequest:
    properties:
      status:
        enum:
        - pending
        - processing
        - shipped
        - delivered
        - cancelled
        example: processing
        type: string
    required:
    - status
    type: object
  handlers.UpdateProductRequest:
    properties:
      category:
        example: Electronics
        maxLength: 100
        minLength: 1
        type: string
      description:
        example: Latest iPhone with A17 Pro chip
        maxLength: 1000
        minLength: 1
        type: string
      image_url:
        example: https://example.com/image.jpg
        type: string
      name:
        example: iPhone 15 Pro
        maxLength: 255
        minLength: 1
        type: string
      price:
        example: 999.99
        minimum: 0.01
        type: number
      stock:
        example: 50
        minimum: 0
        type: integer
    type: object
  handlers.UpdateProfileRequest:
    properties:
      name:
        example: John Doe
        maxLength: 100
        minLength: 2
        type: string
      phone:
        example: "+1234567890"
        maxLength: 20
        type: string
    type: object
  handlers.UserProfileResponse:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      email:
        type: string
      favorites:
        items:
          $ref: '#/definitions/models.Favorite'
        type: array
      id:
        type: string
      name:
        type: string
      orders:
        description: Relationships
        items:
          $ref: '#/definitions/models.Order'
        type: array
      recent_activity:
        $ref: '#/definitions/handlers.UserRecentActivity'
      recommendations:
        items:
          $ref: '#/definitions/models.Recommendation'
        type: array
      shopping_cart:
        $ref: '#/definitions/models.ShoppingCart'
      statistics:
        $ref: '#/definitions/handlers.UserProfileStatistics'
      updated_at:
        type: string
      upvotes:
        items:
          $ref: '#/definitions/models.Upvote'
        type: array
      user_interactions:
        items:
          $ref: '#/definitions/models.UserInteraction'
        type: array
    type: object
  handlers.UserProfileStatistics:
    properties:
      average_order_value:
        type: number
      cart_items_count:
        type: integer
      cart_total_value:
        type: number
      favorite_category:
        type: string
      recommendations_clicked:
        type: integer
      recommendations_received:
        type: integer
      total_interactions:
        type: integer
      total_orders:
        type: integer
      total_spent:
        type: number
    type: object
  handlers.UserRecentActivity:
    properties:
      recent_interactions:
        items:
          $ref: '#/definitions/models.UserInteraction'
        type: array
      recent_orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      recent_searches:
        items:
          $ref: '#/definitions/models.SearchQuery'
        type: array
      recent_views:
        items:
          $ref: '#/definitions/models.ProductView'
        type: array
    type: object
  models.AnomalyAlert:
    properties:
      anomaly_reasons:
        description: JSON array of reasons
        type: string
      anomaly_score:
        type: number
      created_at:
        type: string
      id:
        type: string
      ip_address:
        type: string
      is_resolved:
        type: boolean
      notes:
        type: string
      request_log:
        allOf:
        - $ref: '#/definitions/models.RequestLog'
        description: Relationships
      request_log_id:
        type: string
      resolved_at:
        type: string
      resolved_by:
        type: string
      resolved_by_user:
        $ref: '#/definitions/models.User'
      risk_level:
        description: '''low'', ''medium'', ''high'', ''critical'''
        type: string
      updated_at:
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: string
    type: object
  models.CartItem:
    properties:
      cart:
        allOf:
        - $ref: '#/definitions/models.ShoppingCart'
        description: Relationships
      cart_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      quantity:
        type: integer
      updated_at:
        type: string
    type: object
  models.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      rating:
        description: 1-5 star rating
        type: integer
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.Discount:
    properties:
      category:
        description: Nullable for product-specific discounts
        type: string
      created_at:
        type: string
      discount_type:
        description: '''percentage'', ''fixed_amount'''
        type: string
      discount_value:
        description: Percentage (0-100) or fixed amount
        type: number
      end_date:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      max_discount_amount:
        description: Maximum discount amount (for percentage)
        type: number
      min_order_amount:
        description: Minimum order amount to apply discount
        type: number
      product:
        allOf:
        - $ref: '#/definitions/models.Product'
        description: Relationships
      product_id:
        description: Nullable for category-wide discounts
        type: string
      start_date:
        type: string
      updated_at:
        type: string
      usage_count:
        type: integer
      usage_limit:
        description: 0 = unlimited
        type: integer
    type: object
  models.Favorite:
    properties:
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.Order:
    properties:
      created_at:
        type: string
      id:
        type: string
      order_items:
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      status:
        type: string
      total:
        type: number
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.OrderItem:
    properties:
      created_at:
        type: string
      id:
        type: string
      order:
        allOf:
        - $ref: '#/definitions/models.Order'
        description: Relationships
      order_id:
        type: string
      price:
        type: number
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  models.Product:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      category:
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      description:
        type: string
      discounts:
        items:
          $ref: '#/definitions/models.Discount'
        type: array
      favorites:
        items:
          $ref: '#/definitions/models.Favorite'
        type: array
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      order_items:
        description: Relationships
        items:
          $ref: '#/definitions/models.OrderItem'
        type: array
      price:
        type: number
      product_views:
        items:
          $ref: '#/definitions/models.ProductView'
        type: array
      recommendations:
        items:
          $ref: '#/definitions/models.Recommendation'
        type: array
      stock:
        type: integer
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      updated_at:
        type: string
      upvotes:
        items:
          $ref: '#/definitions/models.Upvote'
        type: array
      user_interactions:
        items:
          $ref: '#/definitions/models.UserInteraction'
        type: array
    type: object
  models.ProductView:
    properties:
      created_at:
        description: Changed from Timestamp to CreatedAt for consistency
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      session_id:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.Recommendation:
    properties:
      algorithm_type:
        description: '''collaborative'', ''content_based'', ''hybrid'''
        type: string
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      score:
        type: number
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.RequestLog:
    properties:
      id:
        type: string
      ip_address:
        type: string
      method:
        type: string
      path:
        type: string
      query_params:
        type: string
      request_size:
        type: integer
      response_size:
        type: integer
      response_time:
        description: in milliseconds
        type: number
      session_id:
        type: string
      status_code:
        type: integer
      timestamp:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  models.SearchQuery:
    properties:
      created_at:
        description: Changed from Timestamp to CreatedAt for consistency
        type: string
      id:
        type: string
      query:
        type: string
      results_clicked:
        type: integer
      results_count:
        type: integer
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.SecurityMetrics:
    properties:
      anomalous_requests:
        type: integer
      avg_response_time:
        type: number
      blocked_requests:
        type: integer
      created_at:
        type: string
      date:
        type: string
      error_rate:
        type: number
      high_risk_requests:
        type: integer
      id:
        type: string
      total_requests:
        type: integer
      unique_ips:
        type: integer
      updated_at:
        type: string
    type: object
  models.ShoppingCart:
    properties:
      cart_items:
        items:
          $ref: '#/definitions/models.CartItem'
        type: array
      created_at:
        type: string
      id:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.Tag:
    properties:
      color:
        description: Hex color code
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      products:
        description: Relationships
        items:
          $ref: '#/definitions/models.Product'
        type: array
    type: object
  models.Upvote:
    properties:
      created_at:
        type: string
      id:
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
  models.User:
    properties:
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      created_at:
        type: string
      email:
        type: string
      favorites:
        items:
          $ref: '#/definitions/models.Favorite'
        type: array
      id:
        type: string
      name:
        type: string
      orders:
        description: Relationships
        items:
          $ref: '#/definitions/models.Order'
        type: array
      recommendations:
        items:
          $ref: '#/definitions/models.Recommendation'
        type: array
      shopping_cart:
        $ref: '#/definitions/models.ShoppingCart'
      updated_at:
        type: string
      upvotes:
        items:
          $ref: '#/definitions/models.Upvote'
        type: array
      user_interactions:
        items:
          $ref: '#/definitions/models.UserInteraction'
        type: array
    type: object
  models.UserInteraction:
    properties:
      created_at:
        description: Changed from Timestamp to CreatedAt for consistency
        type: string
      id:
        type: string
      interaction_type:
        description: '''view'', ''cart_add'', ''purchase'', ''like'''
        type: string
      product:
        $ref: '#/definitions/models.Product'
      product_id:
        type: string
      session_id:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: string
    type: object
host: localhost:8081
info:
  contact:
    email: support@bachelor-ecommerce.com
    name: API Support
    url: http://www.swagger.io/support
  description: ML-Powered E-commerce Platform API with advanced recommendation system,
    intelligent search, and comprehensive analytics
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Bachelor E-commerce API
  version: "1.0"
paths:
  /analytics/dashboard:
    get:
      consumes:
      - application/json
      description: Get comprehensive dashboard analytics including user statistics
        and recent interactions
      produces:
      - application/json
      responses:
        "200":
          description: Dashboard analytics retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get dashboard analytics
      tags:
      - Analytics
  /analytics/export:
    get:
      consumes:
      - application/json
      description: Export user analytics data in JSON or CSV format
      parameters:
      - default: '"json"'
        description: Export format (json, csv)
        in: query
        name: format
        type: string
      - default: 30
        description: Number of days to export
        in: query
        name: days
        type: integer
      produces:
      - application/json
      - text/csv
      responses:
        "200":
          description: Analytics data exported successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Unsupported format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Export analytics data
      tags:
      - Analytics
  /analytics/products:
    get:
      consumes:
      - application/json
      description: Get product performance analytics including top selling products,
        most viewed, and category performance
      parameters:
      - default: 30
        description: Number of days to analyze
        in: query
        name: days
        type: integer
      - default: 20
        description: Number of items to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product analytics retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product analytics
      tags:
      - Analytics
  /analytics/recommendations/metrics:
    get:
      consumes:
      - application/json
      description: Get recommendation system performance metrics
      produces:
      - application/json
      responses:
        "200":
          description: Recommendation metrics retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get recommendation metrics
      tags:
      - Analytics
  /analytics/search:
    get:
      consumes:
      - application/json
      description: Get search analytics and query performance metrics
      parameters:
      - default: 30
        description: Number of days to analyze
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Search analytics retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get search analytics
      tags:
      - Analytics
  /analytics/trends:
    get:
      consumes:
      - application/json
      description: Get ML-powered trend analysis and predictions
      parameters:
      - default: 30
        description: Number of days to analyze
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ML trends retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get ML trends
      tags:
      - Analytics
  /analytics/user:
    get:
      consumes:
      - application/json
      description: Get detailed user analytics including interaction stats, category
        preferences, and spending patterns
      parameters:
      - default: 30
        description: Number of days to analyze
        in: query
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User analytics retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user analytics
      tags:
      - Analytics
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's comprehensive profile information
        including statistics and recent activity
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/handlers.UserProfileResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
    put:
      consumes:
      - application/json
      description: Update the authenticated user's profile information
      parameters:
      - description: Profile update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email, name, and password
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/handlers.AuthResponse'
        "400":
          description: Invalid request body or validation error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "409":
          description: User with this email already exists
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /cart:
    get:
      consumes:
      - application/json
      description: Get the current user's shopping cart with all items and total
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get shopping cart
      tags:
      - Cart
  /cart/add:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart with specified quantity
      parameters:
      - description: Item to add to cart
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddToCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added to cart successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or insufficient stock
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add item to cart
      tags:
      - Cart
  /cart/clear:
    delete:
      consumes:
      - application/json
      description: Remove all items from the user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart cleared successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Clear shopping cart
      tags:
      - Cart
  /cart/item/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific item from the user's shopping cart
      parameters:
      - description: Cart Item ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Item removed from cart successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid item ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove item from cart
      tags:
      - Cart
    put:
      consumes:
      - application/json
      description: Update the quantity of a specific item in the user's cart
      parameters:
      - description: Cart Item ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: New quantity (0 to remove item)
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or insufficient stock
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart item not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update cart item quantity
      tags:
      - Cart
  /comments:
    post:
      consumes:
      - application/json
      description: Add a comment and rating to a product
      parameters:
      - description: Comment to add
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Comment added successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add product comment
      tags:
      - Comments
  /comments/{comment_id}:
    delete:
      consumes:
      - application/json
      description: Delete a user's own comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: comment_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid comment ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Comment not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Update a user's own comment
      parameters:
      - description: Comment ID (UUID)
        in: path
        name: comment_id
        required: true
        type: string
      - description: Updated comment data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Comment updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Not authorized to update this comment
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Comment not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update comment
      tags:
      - Comments
  /comments/{product_id}:
    get:
      consumes:
      - application/json
      description: Get paginated list of comments for a product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: product_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comments retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
      summary: Get product comments
      tags:
      - Comments
  /discounts:
    post:
      consumes:
      - application/json
      description: Create a new product or category discount (admin only)
      parameters:
      - description: Discount data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateDiscountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Discount created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create discount
      tags:
      - Discounts
  /discounts/active:
    get:
      consumes:
      - application/json
      description: Get list of currently active discounts
      parameters:
      - description: Filter by product ID
        in: query
        name: product_id
        type: string
      - description: Filter by category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Active discounts retrieved successfully
          schema:
            additionalProperties: true
            type: object
      summary: Get active discounts
      tags:
      - Discounts
  /favorites:
    get:
      consumes:
      - application/json
      description: Get paginated list of user's favorite products
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Favorites retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user favorites
      tags:
      - Favorites
    post:
      consumes:
      - application/json
      description: Add a product to the user's favorite list
      parameters:
      - description: Product to add to favorites
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddFavoriteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product added to favorites successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or product already in favorites
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add product to favorites
      tags:
      - Favorites
  /favorites/{product_id}:
    delete:
      consumes:
      - application/json
      description: Remove a product from the user's favorite list
      parameters:
      - description: Product ID (UUID)
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product removed from favorites successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Favorite not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove product from favorites
      tags:
      - Favorites
  /ml/auto-tagging/auto-tag:
    post:
      consumes:
      - application/json
      description: Automatically assign tags to products that don't have sufficient
        tags
      parameters:
      - default: 50
        description: Maximum number of products to tag
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products auto-tagged successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Auto-tag products
      tags:
      - ML
  /ml/auto-tagging/insights:
    get:
      consumes:
      - application/json
      description: Get insights about the auto-tagging system performance and coverage
      produces:
      - application/json
      responses:
        "200":
          description: Tagging insights retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get tagging insights
      tags:
      - ML
  /ml/auto-tagging/suggest/{id}:
    get:
      consumes:
      - application/json
      description: Get AI-suggested tags for a specific product based on content and
        user behavior
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product tag suggestions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suggest product tags
      tags:
      - ML
  /ml/initialize-services:
    post:
      consumes:
      - application/json
      description: Initialize or retrain all new ML services (sentiment, auto-tagging,
        smart discounts)
      produces:
      - application/json
      responses:
        "200":
          description: ML services initialized successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Initialize ML services
      tags:
      - ML
  /ml/sentiment/category/{category}:
    get:
      consumes:
      - application/json
      description: Get sentiment analysis for a product category based on user comments
      parameters:
      - description: Product Category
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category sentiment analysis retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Analyze category sentiment
      tags:
      - ML
  /ml/sentiment/insights:
    get:
      consumes:
      - application/json
      description: Get actionable sentiment insights across all products and categories
      produces:
      - application/json
      responses:
        "200":
          description: Sentiment insights retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get sentiment insights
      tags:
      - ML
  /ml/sentiment/product/{id}:
    get:
      consumes:
      - application/json
      description: Get sentiment analysis for a specific product based on user comments
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product sentiment analysis retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Analyze product sentiment
      tags:
      - ML
  /ml/smart-discounts/insights:
    get:
      consumes:
      - application/json
      description: Get insights about discount opportunities and performance across
        the platform
      produces:
      - application/json
      responses:
        "200":
          description: Discount insights retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get discount insights
      tags:
      - ML
  /ml/smart-discounts/suggest/category/{category}:
    get:
      consumes:
      - application/json
      description: Get AI-suggested discounts for all products in a specific category
      parameters:
      - description: Product Category
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category discount suggestions retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suggest category discounts
      tags:
      - ML
  /ml/smart-discounts/suggest/product/{id}:
    get:
      consumes:
      - application/json
      description: Get AI-suggested optimal discount for a specific product based
        on performance metrics
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product discount suggestion retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suggest product discount
      tags:
      - ML
  /orders:
    get:
      consumes:
      - application/json
      description: Get paginated list of user's order history with order items
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user orders
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Create a new order from the user's current cart items or specific
        cart items with atomic stock management
      parameters:
      - description: 'Order creation data. cart_item_ids is optional - if not provided,
          orders all cart items. Example: {\'
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Order created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request, empty cart, or insufficient stock
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Cart not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create order from cart
      tags:
      - Orders
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific order
      parameters:
      - description: Order ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            $ref: '#/definitions/models.Order'
        "400":
          description: Invalid order ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - Orders
  /orders/{id}/cancel:
    put:
      consumes:
      - application/json
      description: Cancel a pending order and restore product stock
      parameters:
      - description: Order ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order cancelled successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid order ID or order cannot be cancelled
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Cancel order
      tags:
      - Orders
  /orders/{id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order with validation for status transitions
        (admin access required)
      parameters:
      - description: Order ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: New order status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateOrderStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order status updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or status transition
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Order not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - Orders
  /orders/stats:
    get:
      consumes:
      - application/json
      description: Get comprehensive order statistics for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Order statistics retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get order statistics
      tags:
      - Orders
  /products:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products with optional filtering and sorting
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Search in name and description
        in: query
        name: search
        type: string
      - default: '"created_at"'
        description: Sort field (price, name, created_at)
        in: query
        name: sort
        type: string
      - default: '"desc"'
        description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product in the catalog (admin access required)
      parameters:
      - description: Product creation data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or validation error
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product from the catalog (admin access required)
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID or product has order history
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get detailed information about a specific product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            $ref: '#/definitions/models.Product'
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      summary: Get product by ID
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: Update an existing product in the catalog (admin access required)
      parameters:
      - description: Product ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Product update data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /products/recommendations:
    get:
      consumes:
      - application/json
      description: Get personalized product recommendations using ML algorithms with
        reasoning
      parameters:
      - default: 10
        description: Number of recommendations
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Recommendations retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required for recommendations
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product recommendations
      tags:
      - Products
  /products/search:
    get:
      consumes:
      - application/json
      description: Search products using enhanced search with relevance scoring and
        intelligent filtering
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 20
        description: Items per page
        in: query
        name: limit
        type: integer
      - description: Filter by category
        in: query
        name: category
        type: string
      - description: Minimum price filter
        in: query
        name: min_price
        type: number
      - description: Maximum price filter
        in: query
        name: max_price
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: Search results retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Search query is required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Search products
      tags:
      - Products
  /security/alerts:
    get:
      consumes:
      - application/json
      description: Get recent security alerts with filtering options
      parameters:
      - default: 50
        description: Number of alerts to return
        in: query
        maximum: 1000
        minimum: 1
        name: limit
        type: integer
      - description: Filter by risk level
        enum:
        - low
        - medium
        - high
        - critical
        in: query
        name: risk_level
        type: string
      - description: Filter by resolution status
        in: query
        name: resolved
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: Security alerts data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Security Alerts
      tags:
      - Security
  /security/alerts/{alert_id}/resolve:
    post:
      consumes:
      - application/json
      description: Mark a security alert as resolved with optional notes
      parameters:
      - description: Alert ID
        format: uuid
        in: path
        name: alert_id
        required: true
        type: string
      - description: Resolution details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.ResolveAlertRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Alert resolved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid alert ID or request body
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "404":
          description: Alert not found
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Resolve Security Alert
      tags:
      - Security
  /security/dashboard:
    get:
      consumes:
      - application/json
      description: Get comprehensive security dashboard with anomaly detection data
        and real-time threat monitoring
      produces:
      - application/json
      responses:
        "200":
          description: Security dashboard data
          schema:
            $ref: '#/definitions/handlers.SecurityDashboardResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Security Dashboard
      tags:
      - Security
  /security/insights:
    get:
      consumes:
      - application/json
      description: Get detailed insights and analysis about detected anomalies and
        attack patterns
      produces:
      - application/json
      responses:
        "200":
          description: Anomaly insights data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Anomaly Insights
      tags:
      - Security
  /security/metrics:
    get:
      consumes:
      - application/json
      description: Get security metrics and statistics for a specified time period
      parameters:
      - default: 30
        description: Number of days to include in metrics
        in: query
        maximum: 365
        minimum: 1
        name: days
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Security metrics data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Security Metrics
      tags:
      - Security
  /security/patterns:
    get:
      consumes:
      - application/json
      description: Get information about detectable attack patterns and security threats
      produces:
      - application/json
      responses:
        "200":
          description: Attack patterns information
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Attack Patterns
      tags:
      - Security
  /security/simulate:
    get:
      consumes:
      - application/json
      description: Simulate different types of attacks for demonstration and testing
        purposes
      parameters:
      - description: Attack type
        enum:
        - sql_injection
        - xss
        - brute_force
        - ddos
        example: sql_injection
        in: query
        name: attack_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Attack simulation results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - invalid attack type
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.StandardErrorResponse'
      security:
      - BearerAuth: []
      summary: Simulate Attack
      tags:
      - Security
  /tags:
    get:
      consumes:
      - application/json
      description: Get list of all available product tags
      produces:
      - application/json
      responses:
        "200":
          description: Tags retrieved successfully
          schema:
            additionalProperties: true
            type: object
      summary: Get all tags
      tags:
      - Tags
    post:
      consumes:
      - application/json
      description: Create a new product tag (admin only)
      parameters:
      - description: Tag data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tag created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or tag already exists
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create tag
      tags:
      - Tags
  /tags/products:
    post:
      consumes:
      - application/json
      description: Add a tag to a product (admin only)
      parameters:
      - description: Product and tag IDs
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddProductTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Tag added to product successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or tag already added
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product or tag not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add tag to product
      tags:
      - Tags
  /tags/products/{product_id}:
    get:
      consumes:
      - application/json
      description: Get all tags associated with a product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product tags retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
      summary: Get product tags
      tags:
      - Tags
  /upvotes:
    post:
      consumes:
      - application/json
      description: Add an upvote to a product
      parameters:
      - description: Product to upvote
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.AddUpvoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Product upvoted successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request or already upvoted
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Upvote product
      tags:
      - Upvotes
  /upvotes/{product_id}:
    delete:
      consumes:
      - application/json
      description: Remove an upvote from a product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Upvote removed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Upvote not found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Remove upvote
      tags:
      - Upvotes
    get:
      consumes:
      - application/json
      description: Get upvote count and user's upvote status for a product
      parameters:
      - description: Product ID (UUID)
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Upvotes retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid product ID
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get product upvotes
      tags:
      - Upvotes
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: User authentication and profile management
  name: Authentication
- description: Product catalog management and search
  name: Products
- description: Shopping cart operations
  name: Cart
- description: Order management and tracking
  name: Orders
- description: Business analytics and reporting
  name: Analytics
- description: Machine Learning services and model management
  name: ML
- description: Security monitoring, anomaly detection, and threat analysis
  name: Security
